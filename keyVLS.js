const axios = require('axios');
const qs = require('qs');
const { Telegraf } = require('telegraf');
const https = require('https');
const crypto = require('crypto');
require('dotenv').config();
const moment = require('moment');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ –∏ –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –õ–æ–≥–∏–Ω –≤ —Å–∏—Å—Ç–µ–º—É
class Session {
    constructor() {
        this._cookie = null;
    }

    async login() {
        const data = qs.stringify({
            username: 'DP5PU5JeeB',
            password: 'K00HT0oayJ',
        });

        const agent = new https.Agent({
            rejectUnauthorized: false, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–∞–º–æ–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
        });

        const config = {
            method: 'post',
            maxBodyLength: Infinity,
            url: 'https://45.159.248.196:56895/FuV4NVliDEVg727/login',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            data: data,
            httpsAgent: agent,
        };

        try {
            const response = await axios.request(config);
            const cookies = response.headers['set-cookie'];
            this._cookie = cookies.at(-1) || cookies[0];
            console.info("Session initialized");
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:', error);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è');
        }
    }

    getCookie() {
        return this._cookie;
    }
}

const session = new Session();

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
class ClientManager {
  constructor(cookie) {
      this._cookie = cookie;
  }

  generateRandomEmail(userId) {
      const randomPrefix = Math.floor(100 + Math.random() * 900); // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º 3 —Å–ª—É—á–∞–π–Ω—ã–µ —Ü–∏—Ñ—Ä—ã
      return `${randomPrefix}${userId}UK`;
  }

  generateRandomId() {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ ID –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (–≤–º–µ—Å—Ç–æ —á–∏—Å–ª–æ–≤–æ–≥–æ)
      const randomId = (Math.random() + 1).toString(36).substring(7); // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
      console.log("–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –∫–ª–∏–µ–Ω—Ç–∞: ", randomId); // –í—ã–≤–æ–¥–∏–º ID –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      return randomId;
  }

  async addClient(inboundId, options) {
      const agent = new https.Agent({
          rejectUnauthorized: false,
      });

      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π ID
      if (!options.id) {
          console.error("–û—à–∏–±–∫–∞: ID –∫–ª–∏–µ–Ω—Ç–∞ –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π!");
          return null;
      }

      const data = {
          id: 1, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ id
          settings: JSON.stringify({
              clients: [options],
          }),
      };

      const config = {
          method: 'post',
          maxBodyLength: Infinity,
          url: 'https://45.159.248.196:56895/FuV4NVliDEVg727/panel/api/inbounds/addClient',
          headers: {
              'Accept': 'application/json',
              'Content-Type': 'application/json',
              Cookie: this._cookie,
          },
          httpsAgent: agent,
          data: data,
      };

      try {
          const response = await axios.request(config);
          console.info(`Client ${options.email} added.`);
          console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', response.data);
          return response.data;
      } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:', error);
          if (error.response) {
              console.log('–û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', error.response.data);
          }
          return null;
      }
  }
}

// –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫
(async () => {
  try {
      console.log('–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...');
      await session.login();

      const userId = process.argv[2];
      const amount = parseInt(process.argv[3], 10);

      if (!userId || !amount) {
          console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node script.js <userId> <amount>');
          process.exit(1);
      }

      console.log(`–°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ —Å—É–º–º—É ${amount}...`);

      const clientManager = new ClientManager(session.getCookie());
      const email = clientManager.generateRandomEmail(userId);

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ id
      const randomId = clientManager.generateRandomId();
      console.log(`–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ID –∫–ª–∏–µ–Ω—Ç–∞: ${randomId}`);

      // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
      // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ expiryTime –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç amount
    const clientData = await clientManager.addClient(1, {
      id: randomId, // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ id
      flow: "",
      email: email,
      limitIp: 1,
      totalGB: Infinity,
      expiryTime: 0, 
      enable: true,
      tgId: `${userId}`,
      subId: `${userId}`,
      reset: 0,
    });

      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞
      const key = `vless://${randomId}@45.159.248.196:443?type=tcp&security=reality&pbk=pvtXT4_O32vCMLgNMzYN_TA2k63eul0jkMxeFMZ6_AY&fp=random&sni=yahoo.com&sid=3aee&spx=%2F#${email}`;

      // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram
      await bot.telegram.sendMessage(
          userId,
          `üõ°Ô∏è –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –∫–ª—é—á: <code>${key}</code>`,
          { parse_mode: 'HTML' }
      );
      console.log(`–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
  } catch (err) {
      console.error('–û—à–∏–±–∫–∞:', err.message);
  }
})();
