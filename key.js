require('dotenv').config();
const fs = require('fs');
const axios = require('axios');
const { Telegraf } = require('telegraf');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new Telegraf(process.env.BOT_TOKEN);

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Outline API
const outlineApiConfigSwe = {
    apiUrl: "https://150.241.78.162:43648/3PugAuz6mn-trqnygiY1Zw",
    certSha256: "3997D10C910994D2E8605B6C2AFCAB1E3D6EC390BAA5818C93E2CD3E74CBF850",
};

// –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø–æ–∫—É–ø–∫–∞–º–∏
const purchasesFilePathSwe = './purchasesSwe.json';

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–∞ Outline
const generateOutlineKeySwe = async (amount) => {
    const durationMapping = {
        15: 15 * 24 * 60 * 60 * 1000, // 15 –¥–Ω–µ–π
        30: 30 * 24 * 60 * 60 * 1000, // 1 –º–µ—Å—è—Ü
        180: 180 * 24 * 60 * 60 * 1000, // 6 –º–µ—Å—è—Ü–µ–≤
        360: 365 * 24 * 60 * 60 * 1000, // 1 –≥–æ–¥
    };

    const duration = durationMapping[amount];
    if (!duration) throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –æ–ø–ª–∞—Ç—ã');

    const expirationDate = new Date(Date.now() + duration).toISOString();
    const uniqueId = `VPN-${Date.now()}`; // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID

    try {
        const response = await axios.put(
            `${outlineApiConfigSwe.apiUrl}/access-keys/${uniqueId}`,
            {},
            {
                headers: {
                    'Content-Type': 'application/json',
                    'X-Access-Token': outlineApiConfigSwe.certSha256,
                },
                httpsAgent: new (require('https').Agent)({
                    rejectUnauthorized: false,
                }),
            }
        );

        if (response.status === 201) {
            console.log(`–ö–ª—é—á —Å ID ${uniqueId} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.`);
            return {
                id: uniqueId, 
                key: response.data.accessUrl, 
                expirationDate 
            };
        } else {
            throw new Error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: ${response.status}`);
        }
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞ Outline:', err.response?.data || err.message);
        throw new Error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–∞');
    }
};


const savePurchaseSwe = (userId, data) => {
    let purchases = {};

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –ø–æ–∫—É–ø–æ–∫
    if (fs.existsSync(purchasesFilePathSwe)) {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–∫—É–ø–∫–∏
        const fileData = fs.readFileSync(purchasesFilePathSwe, 'utf-8');

        purchases = JSON.parse(fileData || '{}');
    }

    // –ï—Å–ª–∏ –ø–æ–∫—É–ø–æ–∫ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤
    if (!purchases[userId]) {
        purchases[userId] = [];
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ purchases[userId] –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –º–∞—Å—Å–∏–≤
    if (!Array.isArray(purchases[userId])) {
        purchases[userId] = []; // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫ –º–∞—Å—Å–∏–≤
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–æ–∫—É–ø–∫—É –≤ –º–∞—Å—Å–∏–≤
    purchases[userId].push(data);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
    const updatedData = JSON.stringify(purchases, null, 2);
    fs.writeFileSync(purchasesFilePathSwe, updatedData, 'utf-8');
};





(async () => {
    const userId = process.argv[2]; 
    const amount = parseInt(process.argv[3], 10); 

    if (!userId || !amount) {
        console.error('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node script.js <userId> <amount>');
        process.exit(1);
    }

    try {
        console.log(`–°–æ–∑–¥–∞—ë–º –∫–ª—é—á –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –Ω–∞ —Å—É–º–º—É ${amount}...`);
        const { key, expirationDate, id } = await generateOutlineKeySwe(amount);  
        savePurchaseSwe(userId, {
            purchaseDate: new Date().toISOString(),
            expirationDate,
            accessKey: key,
            id: id,  
            County: 'Sweden',
        });
        console.log(`–ö–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω: ${key}`);

        
        const formattedExpirationDate = new Date(expirationDate).toLocaleDateString('ru-RU');

        
        await bot.telegram.sendMessage(userId, 
            `üõ°Ô∏è –í–∞–º –±—ã–ª –≤—ã–¥–∞–Ω –∫–ª—é—á: <code>${key}</code>\n\n‚è≥ C—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ: <code>${formattedExpirationDate}</code>`, 
            { parse_mode: 'HTML' }
        );
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${userId}`);
    } catch (err) {
        console.error('–û—à–∏–±–∫–∞:', err.message);
    }
})();